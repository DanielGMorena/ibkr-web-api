name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          pip install poetry
          poetry env use python${{ matrix.python-version }}

      - name: Install Dependencies
        run: poetry install --with dev --all-extras
        env:
          POETRY_NO_INTERACTION: 1

      - name: Typing with mypy
        run: poetry run mypy app

      - name: Lint with Ruff
        run: poetry run ruff check .

      - name: Run Tests
        run: poetry run pytest --cov=app --cov-report=term-missing tests

  build-exe:
    runs-on: windows-latest
    needs: lint-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --with dev,dist

      - name: Build executable with PyInstaller
        run: pyinstaller config/pyinstaller.spec

      - name: Archive executable
        uses: actions/upload-artifact@v4
        with:
          name: ibkr-web-api-exe
          path: dist/ibkr-web-api.exe

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          $version = (poetry version -s).Trim()
          echo "version=v$version" >> $env:GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.get_version.outputs.version }}
          git push origin ${{ steps.get_version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: IBKR Web API v1.0.${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload EXE to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/ibkr-web-api.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
